#ifndef OPENCL_PCIE_RATE_TEST_H
#define OPENCL_PCIE_RATE_TEST_H

#include <cuda_runtime.h>
#include <cuda.h>
#include <stdint.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <CL/cl.hpp>

#include "pcieRateTest.hpp"

/// Defines number of events to use for synchronisation
#define NUM_SYNC_EVENTS 100

/// Standard CUDA error checking wrapper function
// #define gpuErrchk(ans) { gpuAssert((ans), __FILE__, __LINE__); }
// inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true)
// {
//    if (code != cudaSuccess) 
//    {
//       printf("GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
//       if (abort) exit(code);
//    }
// }

/**\class OpenCLPcieRateTest
 * \brief   CUDA specific implementation of the PcieRateTest class
 * \details Implements all functions required by the PcieRateTest class for CUDA specific devices.
 */
class OpenCLPcieRateTest : public PcieRateTest
{
    public:
        OpenCLPcieRateTest(int32_t i32DeviceId, int64_t i64NumFrames, int64_t i64FrameSizeBytes, bool bH2D, bool bD2H);

        ~OpenCLPcieRateTest();

        float transfer(int64_t i64NumTransfers) override;
        
        /// Static function that returns a list of CUDA enabled GPUs as well as their device id for setting the correct value m_i32DeviceId. 
        static void list_opencl_devices();

    protected:
        /// OpenCL context
        cl::Context context;

        ///Device pointers - There is a correpsonding host side pointer and openCL buffer refering to the same object, one is accesable to the user the other to OpenCL.
        int8_t * m_pi32HInput;
        cl::Buffer m_pi32HInputClBuffer;
        int8_t * m_pi32HOutput; 
        cl::Buffer m_pi32HOutputClBuffer;

        ///Host pointers
        cl::Buffer m_pi32DGpuArray;

        /// Queue for host to device data transfers
        cl::CommandQueue m_queueH2D;
        /// Queue for device to host data transfers
        cl::CommandQueue m_queueD2H;

        /// OpenCL events for timing and synchronisation across command queues
        cl::Event m_eventStart;
        cl::Event m_eventEnd;
        cl::Event m_pEventSync[NUM_SYNC_EVENTS];

        /// Static function that will determine the OpenCL device ID from an index generated by \ref list_opencl_devices() 
        static int32_t get_opencl_device_id_from_index(int32_t i32Index);

        /// Static function that will determine the OpenCL platform ID from an index generated by \ref list_opencl_devices() 
        static int32_t get_opencl_platform_id_from_index(int32_t i32Index);
};

#endif