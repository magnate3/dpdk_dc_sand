#ifndef __BERAMFORMER_KERNELS_CUH__
#define __BERAMFORMER_KERNELS_CUH__

#include <cuda.h>
#include <cuda_runtime_api.h>

/** \brief Kernel that implements a naive version of beamformer steering coefficient generation.
 *  
 *  This kernel only operates in a single instance in time. It also assigns a single thread per channel-antenna-beam steering 
 *  coefficient. This results in more accesses to the psDelayValues struct than is necessary. It is thus heavily IO bound and
 *  significant optomisation must still take place. It must be seen as a first naive attempt. It does not consider a changing 
 *  time index. In order to handle changing time indeces, the output array must be manually offset, and the cCurrentTime struct
 *  changed accordingly.
 *  
 *  Input Delay Value Ordering:
 *  This kernel expects the input delay values to be ordered by [channel][antenna][beam] with beam being the fastest changing
 *  index.
 * 
 *  Output Complex Steering Coefficients Ordering:
 *  This kernel expects the output steering coefficients to be ordered by [channel][antenna][beam] with beam being the fastest
 *  changing index.
 * 
 *  Calculating Block and Grid Dimensions:
 *  The block size is set to NUM_THREADS_PER_BLOCK and the grid is two dimensional. There are three parameters to be considered
 *  when setting the dimensions NR_STATIONS,NR_CHANNELS and NR_BEAMS that form a 3 dimensional array of complex beamweights. The
 *  inner two dimensions of this array are stations and beams. These are treated as a single dimension. Ideally they would be a 
 *  single block of NR_STATIONS*NR_BEAMS threads. However this goes above the NUM_THREADS_PER_BLOCK constant and as such the 
 *  NR_STATIONS*NR_BEAMS treads needs to be distributed over a number of blocks. As such the x grid dimension is set to 
 *  ceil(NR_STATIONS*NR_BEAMS/NUM_THREADS_PER_BLOCK). The y grid dimension is NR_CHANNELS. 
 *  The function \ref generate_GPU_kernel_dimensions() implements the logic outlined above.   
 *  
 *  \param[in]  cCurrentTime        Pointer to struct containing the current time to generate steering coefficients for.
 *  \param[in]  cRefTime            Pointer to struct containinf the reference time that the delay values are made with 
 *                                  reference to.
 *  \param[in]  psDelayValues       Pointer to the location in memory of the delay values to be used to to generate the coefficients.
 *  \param[out] pfCplxBeamweights   Pointer to the location in memory to store the complex beamweights generated by the the kernel.
 */
__global__ void calculate_beamweights_naive(
                                struct timespec sCurrentTime, 
                                struct timespec sRefTime,
                                struct delay_vals *psDelayVals, 
                                float* pfCplxSteeringCoeffs);


/** \brief Kernel that implements a modified version of the naive beamformer steering coefficient generation, where each 
 *  thread produces steering coefficients for a number of channels.
 *  
 *  This kernel only operates in a single instance in time. It assigns a single thread per antenna-beam steering 
 *  coefficient. Each thread produces steering coefficients for a number of channels - this is specified by the 
 *  NUM_CHANNELS_PER_KERNEL parameter. It does not consider a changing time index. In order to handle changing time 
 *  indeces, the output array must be manually offset, and the cCurrentTime struct changed accordingly. This is an 
 *  improvement over the naive kernel as it only loads the delay values once for each channel. There is still redundant 
 *  loading of each delay value as each timestamp is calculated in a different kernel while still requiring the same
 *  delay value.
 *  
 *  Input Delay Value Ordering:
 *  This kernel expects the input delay values to be ordered by [channel][antenna][beam] with beam being the fastest 
 *  changing index.
 * 
 *  Output Complex Steering Coefficients Ordering:
 *  This kernel expects the output steering coefficients to be ordered by [channel][antenna][beam] with beam being the 
 *  fastest changing index.
 * 
 *  Calculating Block and Grid Dimensions:
 *  The block size is set in the same way as the naive kernel. The grid size is also calculated in a similar way. The 
 *  only difference in calculating the grid size is that instead of having the y grid dimesnion being equal to 
 *  NR_CHANNELS, it has instead been set to NR_CHANNELS/NUM_CHANNELS_PER_KERNEL to reflect that a single block 
 *  calculates multiple channels per antenna-beam pair.
 *  The function \ref generate_GPU_kernel_dimensions() implements the logic outlined above.   
 *  
 *  \param[in]  cCurrentTime        Pointer to struct containing the current time to generate steering coefficients for.
 *  \param[in]  cRefTime            Pointer to struct containinf the reference time that the delay values are made with 
 *                                  reference to.
 *  \param[in]  psDelayValues       Pointer to the location in memory of the delay values to be used to to generate the 
 *                                  coefficients.
 *  \param[in]  b16BitOutput        If true, casts steering coefficients to 16 bit floats, if false the coefficients are 
 *                                  stored as 32 bit floats.
 *  \param[out] pfCplxBeamweights   Pointer to the location in memory to store the complex beamweights generated by the
 *                                  kernel.
 */
__global__ void calculate_beamweights_grouped_channels(
                                struct timespec sCurrentTime, 
                                struct timespec sRefTime,
                                struct delay_vals *psDelayVals, 
                                float* pfCplxSteeringCoeffs,
                                bool b16BitOutput);

/** \brief  Optomised kernel that implements a modified version of the beamformer steering coefficient generation, it 
 *          has been designed to have no redundant global memory reads.
 *  
 *  This kernel was designed to eliminate all redundant global memory reads of delay values over a large number of time
 *  samples and channels. This was done by having each kernel only load a small subset of the antenna-beam combinations
 *  per block equal to: NUM_ANTBEAMS_PER_BLOCK. Each block only loads NUM_ANTBEAMS_PER_BLOCK delay values from global
 *  memory and produces NUM_ANTBEAMS_PER_BLOCK*NR_CHANNELS*NR_SAMPLES_PER_CHANNEL steering coefficients. It is currently
 *  the fastest steering coefficient generation kernel in this project. 
 *  
 *  Input Delay Value Ordering:
 *  This kernel expects the input delay values to be ordered by [antenna][beam] with beam being the fastest 
 *  changing index.
 * 
 *  Output Complex Steering Coefficients Ordering:
 *  This kernel expects the output steering coefficients to be ordered by [channel][antenna][beam] with beam being the 
 *  fastest changing index.
 * 
 *  Calculating Block and Grid Dimensions:
 *  The number of threads per block is set to the maximum of 1024. Each block only works on NUM_ANTEBEAMS_PER_BLOCK 
 *  antenna beam combinations. This means that NR_STATIONS*NR_BEAMS/NUM_ANTBEAMS_PER_BLOCK blocks are required - this
 *  the grid size.
 *  The function \ref generate_GPU_kernel_dimensions() implements the logic outlined above.   
 *  
 *  \param[in]  cCurrentTime        Pointer to struct containing the current time to generate steering coefficients for.
 *  \param[in]  psDelayValues       Pointer to the location in memory of the delay values to be used to to generate the 
 *                                  coefficients.
 *  \param[in]  b16BitOutput        If true, casts steering coefficients to 16 bit floats, if false the coefficients are
 *                                  stored as 32 bit floats.
 *  \param[out] pfCplxBeamweights   Pointer to the location in memory to store the complex beamweights generated by 
 *                                  the kernel.
 */
__global__ void calculate_beamweights_grouped_channels_and_timestamps(
                                struct timespec sRefTime,
                                struct delay_vals *psDelayVals, 
                                float* pfCplxSteeringCoeffs,
                                bool b16BitOutput);

/** \brief  Kernel that performs both steering coefficient generation and the generation of the beams.
 *  
 *  The detailed description of this kernel can be found at:
 *      https://drive.google.com/open?id=1FXI0WKOZlEQN1iXGm4OqoB6x1gISj2sn
 *  
 *  This kernel is only designed for the 64 antenna 16 beam case. Each block will calculate beams for 
 *  NR_SAMPLES_PER_CHANNEL time values. Each channel is calculated in a seperate block. A single thread generates 
 *  steering coefficients for a single antenna-beam combination and multiplies it with the antenna samples. A set of 64 
 *  threads representing 64 antennas for a single beam then need to add these values together using a reduction 
 *  operation. This is whle process is repeated NUM_SAMPLES_PER_CHANNEL times.
 *  
 *  Input Delay Value Ordering:
 *  This kernel expects the input delay values to be ordered by [channel][antenna][beam] with beam being the fastest 
 *  changing index. The antenna sample values are expected to be ordered by: char2 [channel][time/16][station][16]. This is 
 *  consistent with the tensor core kernels. This expects only single polarsiation data.
 * 
 *  Output Complex Steering Coefficients Ordering:
 *  This kernel generates output beam data formatted as float2 [channel][time/16][beam][16]. A reorder further in the pipeline 
 *  is to be expected.
 * 
 *  Calculating Block and Grid Dimensions:
 *  The number of threads per block is set to the maximum of 1024(16 beams x 64 antennas). 
 *  A block is launched for each channel, meaning the 1 dimensional grid dimension is NR_CHANNELS wide.
 *  .
 *  The function \ref generate_GPU_kernel_dimensions() implements the logic outlined above.   
 *  
 *  \param[in]  cRefTime            Pointer to struct containinf the reference time that the delay values are made with 
 *                                  reference to.
 *  \param[in]  psDelayValues       Pointer to the location in memory of the delay values to be used to to generate the 
 *                                  coefficients.
 *  \param[out] pi8AntennaData      Pointer to the location in memory to store the complex beamweights generated by 
 *                                  the kernel.
 */
__global__ void calculate_beamweights_and_beamform_single_channel(
                                struct timespec sRefTime,
                                struct delay_vals *psDelayVals, 
                                float* pfBeams,
                                int8_t * pi8AntennaData);

#endif